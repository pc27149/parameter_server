// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph_partition/parsa.proto

#ifndef PROTOBUF_graph_5fpartition_2fparsa_2eproto__INCLUDED
#define PROTOBUF_graph_5fpartition_2fparsa_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/config.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {
namespace GP {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_graph_5fpartition_2fparsa_2eproto();
void protobuf_AssignDesc_graph_5fpartition_2fparsa_2eproto();
void protobuf_ShutdownFile_graph_5fpartition_2fparsa_2eproto();

class Config;
class ParsaConfig;

// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PS.DataConfig input_graph = 1;
  inline bool has_input_graph() const;
  inline void clear_input_graph();
  static const int kInputGraphFieldNumber = 1;
  inline const ::PS::DataConfig& input_graph() const;
  inline ::PS::DataConfig* mutable_input_graph();
  inline ::PS::DataConfig* release_input_graph();
  inline void set_allocated_input_graph(::PS::DataConfig* input_graph);

  // optional .PS.DataConfig output_graph = 2;
  inline bool has_output_graph() const;
  inline void clear_output_graph();
  static const int kOutputGraphFieldNumber = 2;
  inline const ::PS::DataConfig& output_graph() const;
  inline ::PS::DataConfig* mutable_output_graph();
  inline ::PS::DataConfig* release_output_graph();
  inline void set_allocated_output_graph(::PS::DataConfig* output_graph);

  // optional .PS.GP.ParsaConfig parsa = 3;
  inline bool has_parsa() const;
  inline void clear_parsa();
  static const int kParsaFieldNumber = 3;
  inline const ::PS::GP::ParsaConfig& parsa() const;
  inline ::PS::GP::ParsaConfig* mutable_parsa();
  inline ::PS::GP::ParsaConfig* release_parsa();
  inline void set_allocated_parsa(::PS::GP::ParsaConfig* parsa);

  // @@protoc_insertion_point(class_scope:PS.GP.Config)
 private:
  inline void set_has_input_graph();
  inline void clear_has_input_graph();
  inline void set_has_output_graph();
  inline void clear_has_output_graph();
  inline void set_has_parsa();
  inline void clear_has_parsa();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::DataConfig* input_graph_;
  ::PS::DataConfig* output_graph_;
  ::PS::GP::ParsaConfig* parsa_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_graph_5fpartition_2fparsa_2eproto();
  friend void protobuf_AssignDesc_graph_5fpartition_2fparsa_2eproto();
  friend void protobuf_ShutdownFile_graph_5fpartition_2fparsa_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class ParsaConfig : public ::google::protobuf::Message {
 public:
  ParsaConfig();
  virtual ~ParsaConfig();

  ParsaConfig(const ParsaConfig& from);

  inline ParsaConfig& operator=(const ParsaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParsaConfig& default_instance();

  void Swap(ParsaConfig* other);

  // implements Message ----------------------------------------------

  ParsaConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParsaConfig& from);
  void MergeFrom(const ParsaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 block_size = 4 [default = 100000];
  inline bool has_block_size() const;
  inline void clear_block_size();
  static const int kBlockSizeFieldNumber = 4;
  inline ::google::protobuf::int32 block_size() const;
  inline void set_block_size(::google::protobuf::int32 value);

  // optional int32 num_partitions = 5 [default = 8];
  inline bool has_num_partitions() const;
  inline void clear_num_partitions();
  static const int kNumPartitionsFieldNumber = 5;
  inline ::google::protobuf::int32 num_partitions() const;
  inline void set_num_partitions(::google::protobuf::int32 value);

  // optional int32 bloomfilter_k = 6 [default = 4];
  inline bool has_bloomfilter_k() const;
  inline void clear_bloomfilter_k();
  static const int kBloomfilterKFieldNumber = 6;
  inline ::google::protobuf::int32 bloomfilter_k() const;
  inline void set_bloomfilter_k(::google::protobuf::int32 value);

  // optional float bloomfilter_m_ratio = 9 [default = 2];
  inline bool has_bloomfilter_m_ratio() const;
  inline void clear_bloomfilter_m_ratio();
  static const int kBloomfilterMRatioFieldNumber = 9;
  inline float bloomfilter_m_ratio() const;
  inline void set_bloomfilter_m_ratio(float value);

  // optional int32 cost_cache_limit = 7 [default = 100];
  inline bool has_cost_cache_limit() const;
  inline void clear_cost_cache_limit();
  static const int kCostCacheLimitFieldNumber = 7;
  inline ::google::protobuf::int32 cost_cache_limit() const;
  inline void set_cost_cache_limit(::google::protobuf::int32 value);

  // optional int32 data_buff_size_in_MB = 8 [default = 1000];
  inline bool has_data_buff_size_in_mb() const;
  inline void clear_data_buff_size_in_mb();
  static const int kDataBuffSizeInMBFieldNumber = 8;
  inline ::google::protobuf::int32 data_buff_size_in_mb() const;
  inline void set_data_buff_size_in_mb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.GP.ParsaConfig)
 private:
  inline void set_has_block_size();
  inline void clear_has_block_size();
  inline void set_has_num_partitions();
  inline void clear_has_num_partitions();
  inline void set_has_bloomfilter_k();
  inline void clear_has_bloomfilter_k();
  inline void set_has_bloomfilter_m_ratio();
  inline void clear_has_bloomfilter_m_ratio();
  inline void set_has_cost_cache_limit();
  inline void clear_has_cost_cache_limit();
  inline void set_has_data_buff_size_in_mb();
  inline void clear_has_data_buff_size_in_mb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 block_size_;
  ::google::protobuf::int32 num_partitions_;
  ::google::protobuf::int32 bloomfilter_k_;
  float bloomfilter_m_ratio_;
  ::google::protobuf::int32 cost_cache_limit_;
  ::google::protobuf::int32 data_buff_size_in_mb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_graph_5fpartition_2fparsa_2eproto();
  friend void protobuf_AssignDesc_graph_5fpartition_2fparsa_2eproto();
  friend void protobuf_ShutdownFile_graph_5fpartition_2fparsa_2eproto();

  void InitAsDefaultInstance();
  static ParsaConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional .PS.DataConfig input_graph = 1;
inline bool Config::has_input_graph() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_input_graph() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_input_graph() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_input_graph() {
  if (input_graph_ != NULL) input_graph_->::PS::DataConfig::Clear();
  clear_has_input_graph();
}
inline const ::PS::DataConfig& Config::input_graph() const {
  return input_graph_ != NULL ? *input_graph_ : *default_instance_->input_graph_;
}
inline ::PS::DataConfig* Config::mutable_input_graph() {
  set_has_input_graph();
  if (input_graph_ == NULL) input_graph_ = new ::PS::DataConfig;
  return input_graph_;
}
inline ::PS::DataConfig* Config::release_input_graph() {
  clear_has_input_graph();
  ::PS::DataConfig* temp = input_graph_;
  input_graph_ = NULL;
  return temp;
}
inline void Config::set_allocated_input_graph(::PS::DataConfig* input_graph) {
  delete input_graph_;
  input_graph_ = input_graph;
  if (input_graph) {
    set_has_input_graph();
  } else {
    clear_has_input_graph();
  }
}

// optional .PS.DataConfig output_graph = 2;
inline bool Config::has_output_graph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_output_graph() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_output_graph() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_output_graph() {
  if (output_graph_ != NULL) output_graph_->::PS::DataConfig::Clear();
  clear_has_output_graph();
}
inline const ::PS::DataConfig& Config::output_graph() const {
  return output_graph_ != NULL ? *output_graph_ : *default_instance_->output_graph_;
}
inline ::PS::DataConfig* Config::mutable_output_graph() {
  set_has_output_graph();
  if (output_graph_ == NULL) output_graph_ = new ::PS::DataConfig;
  return output_graph_;
}
inline ::PS::DataConfig* Config::release_output_graph() {
  clear_has_output_graph();
  ::PS::DataConfig* temp = output_graph_;
  output_graph_ = NULL;
  return temp;
}
inline void Config::set_allocated_output_graph(::PS::DataConfig* output_graph) {
  delete output_graph_;
  output_graph_ = output_graph;
  if (output_graph) {
    set_has_output_graph();
  } else {
    clear_has_output_graph();
  }
}

// optional .PS.GP.ParsaConfig parsa = 3;
inline bool Config::has_parsa() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_parsa() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_parsa() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_parsa() {
  if (parsa_ != NULL) parsa_->::PS::GP::ParsaConfig::Clear();
  clear_has_parsa();
}
inline const ::PS::GP::ParsaConfig& Config::parsa() const {
  return parsa_ != NULL ? *parsa_ : *default_instance_->parsa_;
}
inline ::PS::GP::ParsaConfig* Config::mutable_parsa() {
  set_has_parsa();
  if (parsa_ == NULL) parsa_ = new ::PS::GP::ParsaConfig;
  return parsa_;
}
inline ::PS::GP::ParsaConfig* Config::release_parsa() {
  clear_has_parsa();
  ::PS::GP::ParsaConfig* temp = parsa_;
  parsa_ = NULL;
  return temp;
}
inline void Config::set_allocated_parsa(::PS::GP::ParsaConfig* parsa) {
  delete parsa_;
  parsa_ = parsa;
  if (parsa) {
    set_has_parsa();
  } else {
    clear_has_parsa();
  }
}

// -------------------------------------------------------------------

// ParsaConfig

// optional int32 block_size = 4 [default = 100000];
inline bool ParsaConfig::has_block_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParsaConfig::set_has_block_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParsaConfig::clear_has_block_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParsaConfig::clear_block_size() {
  block_size_ = 100000;
  clear_has_block_size();
}
inline ::google::protobuf::int32 ParsaConfig::block_size() const {
  return block_size_;
}
inline void ParsaConfig::set_block_size(::google::protobuf::int32 value) {
  set_has_block_size();
  block_size_ = value;
}

// optional int32 num_partitions = 5 [default = 8];
inline bool ParsaConfig::has_num_partitions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParsaConfig::set_has_num_partitions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParsaConfig::clear_has_num_partitions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParsaConfig::clear_num_partitions() {
  num_partitions_ = 8;
  clear_has_num_partitions();
}
inline ::google::protobuf::int32 ParsaConfig::num_partitions() const {
  return num_partitions_;
}
inline void ParsaConfig::set_num_partitions(::google::protobuf::int32 value) {
  set_has_num_partitions();
  num_partitions_ = value;
}

// optional int32 bloomfilter_k = 6 [default = 4];
inline bool ParsaConfig::has_bloomfilter_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParsaConfig::set_has_bloomfilter_k() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParsaConfig::clear_has_bloomfilter_k() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParsaConfig::clear_bloomfilter_k() {
  bloomfilter_k_ = 4;
  clear_has_bloomfilter_k();
}
inline ::google::protobuf::int32 ParsaConfig::bloomfilter_k() const {
  return bloomfilter_k_;
}
inline void ParsaConfig::set_bloomfilter_k(::google::protobuf::int32 value) {
  set_has_bloomfilter_k();
  bloomfilter_k_ = value;
}

// optional float bloomfilter_m_ratio = 9 [default = 2];
inline bool ParsaConfig::has_bloomfilter_m_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParsaConfig::set_has_bloomfilter_m_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParsaConfig::clear_has_bloomfilter_m_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParsaConfig::clear_bloomfilter_m_ratio() {
  bloomfilter_m_ratio_ = 2;
  clear_has_bloomfilter_m_ratio();
}
inline float ParsaConfig::bloomfilter_m_ratio() const {
  return bloomfilter_m_ratio_;
}
inline void ParsaConfig::set_bloomfilter_m_ratio(float value) {
  set_has_bloomfilter_m_ratio();
  bloomfilter_m_ratio_ = value;
}

// optional int32 cost_cache_limit = 7 [default = 100];
inline bool ParsaConfig::has_cost_cache_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParsaConfig::set_has_cost_cache_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParsaConfig::clear_has_cost_cache_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParsaConfig::clear_cost_cache_limit() {
  cost_cache_limit_ = 100;
  clear_has_cost_cache_limit();
}
inline ::google::protobuf::int32 ParsaConfig::cost_cache_limit() const {
  return cost_cache_limit_;
}
inline void ParsaConfig::set_cost_cache_limit(::google::protobuf::int32 value) {
  set_has_cost_cache_limit();
  cost_cache_limit_ = value;
}

// optional int32 data_buff_size_in_MB = 8 [default = 1000];
inline bool ParsaConfig::has_data_buff_size_in_mb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParsaConfig::set_has_data_buff_size_in_mb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParsaConfig::clear_has_data_buff_size_in_mb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParsaConfig::clear_data_buff_size_in_mb() {
  data_buff_size_in_mb_ = 1000;
  clear_has_data_buff_size_in_mb();
}
inline ::google::protobuf::int32 ParsaConfig::data_buff_size_in_mb() const {
  return data_buff_size_in_mb_;
}
inline void ParsaConfig::set_data_buff_size_in_mb(::google::protobuf::int32 value) {
  set_has_data_buff_size_in_mb();
  data_buff_size_in_mb_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GP
}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_graph_5fpartition_2fparsa_2eproto__INCLUDED
